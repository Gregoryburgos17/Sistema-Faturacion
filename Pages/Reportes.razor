@page "/fetchdata"

@using Sistema_facturacion.Data.Models
@using Sistema_facturacion.Data.Repositories
@using Sistema_facturacion.Services
@using System.IO
@inject ProductoRepository productoRepository
@inject TipoProductoRepository tipoProductoRepository
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime
@inject ExportServicePDF exportPdfService

<h1>Reportes</h1>

<button class="btn btn-primary" @onclick="@ExportToPdf">Export to PDF</button>

<a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true"> Reporte del listado de productos en existencia.</a>

<hr class="sidebar-divider">

<table class="table">
    <thead class="table-dark text-center">
        <tr>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Tipo</th>
            <th>Precio</th>
            <th>Fecha</th>
            <th>Cantidad</th>
        </tr>
    </thead>
    <tbody>

        @foreach (Producto product in productos)
        {
            <tr>
                <td>@product.Nombre</td>
                <td>@product.Descripcion</td>
                <td>@product.TipoProducto.Nombre</td>
                <td>@product.Precio</td>
                <td>@product.FechaRegistro</td>
                <td>@product.Cantidad</td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<Producto> productos = new();
    List<TipoProducto> tipoProductos = new();

    protected override async Task OnInitializedAsync()
    {
        productos = await productoRepository.GetAllAsync();
        tipoProductos = await tipoProductoRepository.GetAllAsync();
        foreach (Producto prod in productos)
        {
            prod.TipoProducto = tipoProductos[(prod.TipoProductoID - 1)];
        }
        StateHasChanged();
    }
    
    
}

@functions
{

    protected async Task ExportToPdf()
    {
        using (MemoryStream excelStream = exportPdfService.CreatePdf(productos))
        {
            await JSRuntime.SaveAs("Sample.pdf", excelStream.ToArray());
        }
    }
}