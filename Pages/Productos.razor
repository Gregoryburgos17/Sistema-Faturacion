@page "/productos"
@using Sistema_facturacion.Data.Models
@using Sistema_facturacion.Data.Repositories
@inject ProductoRepository productoRepository
@inject TipoProductoRepository tipoProductoRepository
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime

<h1>Productos</h1>

<p></p>

<NavLink class="nav-link" href="FormularioProducto">
    <button class="btn btn-success"><span class="oi oi-plus" aria-hidden="true"></span> Agregar </button>
</NavLink>


<hr class="sidebar-divider">

<table class="table">
    <thead class="table-dark text-center">
        <tr>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Tipo</th>
            <th>Precio</th>
            <th>Fecha</th>
            <th>Cantidad</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Producto product in productos)
        {
            <tr>
                <td>@product.Nombre</td>
                <td>@product.Descripcion</td>
                <td>@product.TipoProducto.Nombre</td>
                <td>@product.Precio</td>
                <td>@product.FechaRegistro</td>
                <td>@product.Cantidad</td>
                <td>
                    <a class="btn btn-warning" href="EditProduct/@product.Id">
                        <span class="oi oi-pencil" aria-hidden="true"></span>
                    </a>
                    <button class="btn btn-danger"><span class="oi oi-trash" aria-hidden="true" @onclick="() => Delete(product)"></span></button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    private Producto producto = new();
    List<Producto> productos = new();

    protected override async Task OnInitializedAsync()
    {
        productos = await productoRepository.GetAllAsync();
        StateHasChanged();
    }

    private async Task Delete(Producto prod)
    {

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {prod.Nombre} product?");
        if (confirmed)
        {
            await productoRepository.DeleteAsync(prod);
        }
        navManager.NavigateTo("/");
    }



}